package com.xinyan.mms.materials.servlet;import com.xinyan.mms.materials.pojo.*;import com.xinyan.mms.materials.query.*;import com.xinyan.mms.materials.service.Service;import com.xinyan.mms.materials.service.impl.ServiceImpl;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;public class Servlet extends HttpServlet {    //时间重写    private Date toDate( String str ) {        try {            return new SimpleDateFormat("yyyy-MM-dd").parse(str);        } catch (ParseException e) {            e.printStackTrace();        }        return null;    }    //调用服务层    private Service service = new ServiceImpl();    /**     * 判断控制     *     * @param request     * @param response     * @throws ServletException     * @throws IOException     */    protected void service( HttpServletRequest request, HttpServletResponse response )            throws ServletException, IOException {        String method = request.getParameter("method");        if ("dictionary".equals(method)) {            dictionary(request, response);        } else if ("add".equals(method)) {            add(request, response);        } else if ("query".equals(method)) {            query(request, response);        } else if ("update".equals(method)) {            update(request, response);        } else if ("delete".equals(method)) {            delete(request, response);        } else if ("ListPage".equals(method)) {            ListPage(request, response);        } else if ("listwarehouse".equals(method)) {            listwarehouse(request, response);        } else if ("toUpdate".equals(method)) {            toUpdate(request, response);        } else if ("statust".equals(method)) {            statust(request, response);        } else if ("statusp".equals(method)) {            statusp(request, response);        }    }    /**     * 添加     */    protected void add( HttpServletRequest request, HttpServletResponse response )            throws ServletException, IOException {        System.out.println("添加进来了");        //实体类        Tab_Materials tab_materials = new Tab_Materials();        Tab_Warehouse tab_warehouse = new Tab_Warehouse();        //获取参数        String materials_coding = request.getParameter("materials_coding");        String materials_name = request.getParameter("materials_name");        String type_coding = request.getParameter("type_coding");        String materials_specification = request.getParameter("materials_specification");        String unit_coding = request.getParameter("unit_coding");        String mmaterials_useprocess = request.getParameter("mmaterials_useprocess");        String materials_remark = request.getParameter("materials_remark");        String status_coding = request.getParameter("status_coding");        String store_name = request.getParameter("store_name");        String warehouse_warningvalue = request.getParameter("warehouse_warningvalue");        String warehouse_stockquantity = request.getParameter("warehouse_stockquantity");        String warehouse_remark = request.getParameter("warehouse_remark");        System.out.println("状态编码" + status_coding);        //存储到实体类        //物料        tab_materials.setMaterials_coding(materials_coding);        tab_materials.setMaterials_name(materials_name);        tab_materials.setType_coding(type_coding);        tab_materials.setMaterials_specification(materials_specification);        tab_materials.setUnit_coding(unit_coding);        tab_materials.setMaterials_useprocess(mmaterials_useprocess);        tab_materials.setMaterials_remark(materials_remark);        tab_materials.setMaterials_status(status_coding);        //仓库        tab_warehouse.setMaterials_coding(materials_coding);        tab_warehouse.setStore_name(store_name);        tab_warehouse.setWarehouse_warningvalue(warehouse_warningvalue);        tab_warehouse.setWarehouse_stockquantity(warehouse_stockquantity);        tab_warehouse.setWarehouse_remark(warehouse_remark);        service.sadd_tab_materials(tab_materials);        service.sadd_Tab_Warehouse(tab_warehouse);        //冲定象到页面        response.sendRedirect(request.getContextPath() + "/Servlet?method=ListPage");    }    //查询    protected void query( HttpServletRequest request, HttpServletResponse response )            throws ServletException, IOException {        System.out.println("进来query控制层");        QueryTab_Materials queryTab_materials = new QueryTab_Materials();        QueryWarehouse queryWarehouse = new QueryWarehouse();        String m_coding = request.getParameter("m_coding");        String m_name = request.getParameter("m_name");        String s_name = request.getParameter("s_name");        //物料查询        queryTab_materials.setMaterials_coding(m_coding);        queryTab_materials.setMaterials_name(m_name);        //库存查询        queryWarehouse.setStore_name(s_name);        //遍历条件对象        List <QueryTab_Materials> materials = service.smateriasl(queryTab_materials);        List <QueryWarehouse> warehouses = service.swarehouse(queryWarehouse);        List <QueryType_Dictionary> queryType_Dictionary = service.SQueryType_Dictionary();        List <QueryUnit_Dictionary> queryUnit_Dictionary = service.SQueryUnit_Dictionary();        System.out.println("获取库存内容对象" + warehouses);        //存储集合对象        List <QueryListPage> query = new ArrayList <>();        for ( QueryTab_Materials m : materials ) {            //内容容器            QueryListPage queryListPage = new QueryListPage();            //物料内容            Integer m_id = m.getMaterials_id();            String mname = m.getMaterials_name();            String m_specification = m.getMaterials_specification();            queryListPage.setMaterials_id(m_id);            queryListPage.setMaterials_name(mname);            queryListPage.setMaterials_specification(m_specification);            System.out.println("DAO层获取到的物料编码" + m.getMaterials_coding());            //库存内容            for ( QueryWarehouse w : warehouses ) {                System.out.println("DAO层获取到的库存物料编码" + w.getMaterials_coding());                System.out.println("DAO层获取到的库存物料名称" + w.getStore_name());                if (m.getMaterials_coding() == w.getMaterials_coding()) {                    System.out.println("query层获取到的库存物料编码" +w.getStore_name());                    System.out.println("query层获取到的库存物料编码" +w.getMaterials_coding());                    queryListPage.setStore_name(w.getStore_name());                    queryListPage.setMaterials_coding(w.getMaterials_coding());                }            }            System.out.println("query循环里面获取到库存物料ID" + queryListPage.getMaterials_coding());            String mstatus_coding = m.getMaterials_status() == 1 ? "停用" : "使用中";            queryListPage.setStatus_coding(mstatus_coding);            //类型            for ( QueryType_Dictionary t : queryType_Dictionary ) {                if (m.getType_coding() == t.getType_coding()) {                    String type_name = t.getType_name();                    queryListPage.setType_name(type_name);                }            }            //单位            for ( QueryUnit_Dictionary u : queryUnit_Dictionary ) {                if (m.getUnit_coding() == u.getUnit_coding()) {                    String unit_name = u.getUnit_name();                    System.out.println("query单位循环获取到值" + unit_name);                    queryListPage.setUnit_name(unit_name);                }            }            //添加到集合里面            query.add(queryListPage);        }        System.out.println("query查询层" + query);        request.getRequestDispatcher("/list.jsp").forward(request, response);    }    //修改    protected void toUpdate( HttpServletRequest request, HttpServletResponse response )            throws ServletException, IOException {        System.out.println("添加进来了");        //实体类        Tab_Materials tab_materials = new Tab_Materials();        Tab_Warehouse tab_warehouse = new Tab_Warehouse();        //获取参数        String materials_coding = request.getParameter("materials_coding");        String materials_name = request.getParameter("materials_name");        String type_coding = request.getParameter("type_coding");        String materials_specification = request.getParameter("materials_specification");        String unit_coding = request.getParameter("unit_coding");        String mmaterials_useprocess = request.getParameter("mmaterials_useprocess");        String materials_remark = request.getParameter("materials_remark");        String status_coding = request.getParameter("status_coding");        String store_name = request.getParameter("store_name");        String warehouse_warningvalue = request.getParameter("warehouse_warningvalue");        String warehouse_stockquantity = request.getParameter("warehouse_stockquantity");        String warehouse_remark = request.getParameter("warehouse_remark");        //存储到实体类        //物料        tab_materials.setMaterials_coding(materials_coding);        tab_materials.setMaterials_name(materials_name);        tab_materials.setType_coding(type_coding);        tab_materials.setMaterials_specification(materials_specification);        tab_materials.setUnit_coding(unit_coding);        tab_materials.setMaterials_useprocess(mmaterials_useprocess);        tab_materials.setMaterials_remark(materials_remark);        tab_materials.setMaterials_status(status_coding);        //仓库        tab_warehouse.setMaterials_coding(materials_coding);        tab_warehouse.setStore_name(store_name);        tab_warehouse.setWarehouse_warningvalue(warehouse_warningvalue);        tab_warehouse.setWarehouse_stockquantity(warehouse_stockquantity);        tab_warehouse.setWarehouse_remark(warehouse_remark);        service.updateM(tab_materials);        service.updateW(tab_warehouse);        response.sendRedirect(request.getContextPath() + "/Servlet?method=ListPage");    }    //修改前获取参数    protected void update( HttpServletRequest request, HttpServletResponse response )            throws ServletException, IOException {        String materials_coding = request.getParameter("m_coding");        QueryWarehouse querywarehouse = service.SQueryUpdatew(materials_coding);        QueryTab_Materials tab_materials = service.SQueryUpdatem(materials_coding);        System.out.println("Servlet数据库获取到库存信息" + querywarehouse);        List <QueryUnit_Dictionary> QueryUnit_Dictionary = service.SQueryUnit_Dictionary();        List <QueryStore_Dictionary> QueryStore_Dictionary = service.SQueryStore_Dictionary();        List <QueryType_Dictionary> QueryType_Dictionary = service.SQueryType_Dictionary();        request.setAttribute("querywarehouse", querywarehouse);        request.setAttribute("tab_materials", tab_materials);        request.setAttribute("QueryUnit_Dictionary", QueryUnit_Dictionary);        request.setAttribute("QueryStore_Dictionary", QueryStore_Dictionary);        request.setAttribute("QueryType_Dictionary", QueryType_Dictionary);        request.getRequestDispatcher("/edit.jsp").forward(request, response);    }    //删除    protected void delete( HttpServletRequest request, HttpServletResponse response )            throws ServletException, IOException {        String materials_coding = request.getParameter("m_coding");        service.sdelete(materials_coding);        response.sendRedirect(request.getContextPath() + "/Servlet?method=ListPage");    }    //页面展示    protected void ListPage( HttpServletRequest request, HttpServletResponse response )            throws ServletException, IOException {        List <QueryListPage> ListPage = service.slistpage();        request.setAttribute("ListPage", ListPage);        request.getRequestDispatcher("/list.jsp").forward(request, response);    }    //字典列表    protected void dictionary( HttpServletRequest request, HttpServletResponse response )            throws ServletException, IOException {        List <QueryUnit_Dictionary> QueryUnit_Dictionary = service.SQueryUnit_Dictionary();        List <QueryStore_Dictionary> QueryStore_Dictionary = service.SQueryStore_Dictionary();        List <QueryType_Dictionary> QueryType_Dictionary = service.SQueryType_Dictionary();        request.setAttribute("QueryUnit_Dictionary", QueryUnit_Dictionary);        request.setAttribute("QueryStore_Dictionary", QueryStore_Dictionary);        request.setAttribute("QueryType_Dictionary", QueryType_Dictionary);        request.getRequestDispatcher("/edit.jsp").forward(request, response);    }    //查看库存    protected void listwarehouse( HttpServletRequest request, HttpServletResponse response )            throws ServletException, IOException {        System.out.println("进来库存调用城");        String materials_coding = request.getParameter("m_id");        System.out.println("从页面获取到要查看库存的物料编码" + materials_coding);        QueryWarehouse mwarehouse = new QueryWarehouse();        mwarehouse.setMaterials_coding(materials_coding);        System.out.println(mwarehouse);        List <Warehouse> mhse = service.squeryWarehouse(mwarehouse);//        System.out.println("库存信息"  + mhse);        request.setAttribute("mhse", mhse);        request.getRequestDispatcher("/warehouse.jsp").forward(request, response);    }    //状态    //停用    protected void statusp( HttpServletRequest request, HttpServletResponse response )            throws ServletException, IOException {        String materials_coding = request.getParameter("m_coding");        service.statust(materials_coding);        response.sendRedirect(request.getContextPath() + "/Servlet?method=ListPage");    }    //启用    protected void statust( HttpServletRequest request, HttpServletResponse response )            throws ServletException, IOException {        String materials_coding = request.getParameter("m_coding");        service.statusp(materials_coding);        response.sendRedirect(request.getContextPath() + "/Servlet?method=ListPage");    }}