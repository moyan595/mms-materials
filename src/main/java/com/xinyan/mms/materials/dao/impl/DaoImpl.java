package com.xinyan.mms.materials.dao.impl;import com.xinyan.mms.materials.dao.Dao;import com.xinyan.mms.materials.pojo.*;import com.xinyan.mms.materials.query.*;import com.xinyan.mms.util.JdbcUtil;import org.apache.commons.dbutils.QueryRunner;import org.apache.commons.dbutils.handlers.BeanHandler;import org.apache.commons.dbutils.handlers.BeanListHandler;import java.sql.Connection;import java.util.ArrayList;import java.util.List;public class DaoImpl implements Dao {    //工具数据库操作    private QueryRunner qr = new QueryRunner();    @Override    public void add_tab_materials( Tab_Materials tab_materials ) {//        System.out.println("Dao层插入物料信息");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "insert into tab_materials(materials_coding, materials_name, unit_coding, materials_specification, " +                    "materials_remark, materials_useprocess, type_coding, materials_status)"                    + "values(?,?,?,?,?,?,?,?)";            qr.update(conn, sql, tab_materials.getMaterials_coding(), tab_materials.getMaterials_name(), tab_materials.getUnit_coding(),                    tab_materials.getMaterials_specification(), tab_materials.getMaterials_remark(), tab_materials.getMaterials_useprocess(),                    tab_materials.getType_coding(), tab_materials.getMaterials_status());        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }    }    @Override    public void add_Tab_Warehouse( Tab_Warehouse tab_warehouse ) {//        System.out.println("Dao层插入物料库存");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "insert into tab_warehouse(materials_coding, store_name, warehouse_warningvalue, warehouse_stockquantity, warehouse_remark)"                    + "values(?,?,?,?,?)";            qr.update(conn, sql, tab_warehouse.getMaterials_coding(), tab_warehouse.getStore_name(), tab_warehouse.getWarehouse_warningvalue(),                    tab_warehouse.getWarehouse_stockquantity(), tab_warehouse.getWarehouse_remark());        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }    }    @Override    public List <QueryTab_Materials> DQueryTab_Materials( ) {//        System.out.println("Dao物料查询进来了");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "select materials_id, materials_coding, materials_name, unit_coding, materials_specification,  type_coding, materials_status from tab_materials";//            System.out.println("Dao物料查"  + qr.query(conn, sql, new BeanListHandler<>(QueryTab_Materials.class)));            return qr.query(conn, sql, new BeanListHandler <>(QueryTab_Materials.class));        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }        return null;    }    @Override    public List <QueryTab_Warehouse> DQueryTab_Warehouse( ) {//        System.out.println("Dao查询物料库存进来了");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "select  materials_coding, store_name, warehouse_warningvalue, warehouse_stockquantity, warehouse_remark from tab_warehouse";//            System.out.println("Dao查询物料库存"  +  qr.query(conn, sql, new BeanListHandler<>(QueryTab_Warehouse.class)));            return qr.query(conn, sql, new BeanListHandler <>(QueryTab_Warehouse.class));        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }        return null;    }    @Override    public List <Warehouse> DQueryWarehouse( QueryWarehouse queryWarehouse ) {//        System.out.println("Dao查询物料库存进来了");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            List <Object> args = new ArrayList <>();            StringBuffer sql = new StringBuffer("select  materials_coding, store_name, warehouse_warningvalue, warehouse_stockquantity, warehouse_remark from tab_warehouse where 1 = 1 ");            if (queryWarehouse != null) {                if (queryWarehouse.getMaterials_coding() != null && !"".equals(queryWarehouse.getMaterials_coding())) {                    sql.append(" and materials_coding like ? ");                    args.add("%" + queryWarehouse.getMaterials_coding() + "%");                }            }//            System.out.println("库存遍历出来的" +  qr.query(conn,sql.toString(),new BeanListHandler <>(Warehouse.class),args.toArray()));            return qr.query(conn, sql.toString(), new BeanListHandler <>(Warehouse.class), args.toArray());        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }        return null;    }    /**     * 查询物料     *     * @param queryTab_materials     * @return     */    @Override    public List <QueryTab_Materials> materials( QueryTab_Materials queryTab_materials ) {        System.out.println("Dao物料条件查询");        System.out.println(queryTab_materials);        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            List<Object> args = new ArrayList<>();            StringBuffer sql = new StringBuffer("select materials_id, materials_coding, materials_name, unit_coding, materials_specification,  type_coding, materials_status from tab_materials  where 1 = 1 ");            if(queryTab_materials != null ){                if(queryTab_materials.getMaterials_coding() != null &&  !"".equals(queryTab_materials.getMaterials_coding())){                    sql.append(" and materials_coding like ?");                    args.add("%" + queryTab_materials.getMaterials_coding() + "%");                }            }            if(queryTab_materials != null ){                if(queryTab_materials.getMaterials_name() != null &&  !"".equals(queryTab_materials.getMaterials_name())){                    sql.append(" and materials_name like ?");                    args.add("%" + queryTab_materials.getMaterials_name() + "%");                }            }            return qr.query(conn, sql.toString(), new BeanListHandler<>(QueryTab_Materials.class), args.toArray());        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }        return null;    }    /**     * 查询库存名称     *     * @param queryWarehouse     * @return     */    @Override    public List <QueryWarehouse> warehouse( QueryWarehouse queryWarehouse ) {        System.out.println("Dao库存条件查询");        System.out.println(queryWarehouse);        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            List<Object> args = new ArrayList<>();            StringBuffer sql = new StringBuffer("select materials_coding, store_name, warehouse_warningvalue, warehouse_stockquantity, warehouse_remark from tab_warehouse  where 1 = 1 ");            if(queryWarehouse != null ){                if(queryWarehouse.getStore_name() != null &&  !"".equals(queryWarehouse.getStore_name())){                    sql.append(" and store_name like ?");                    args.add("%" + queryWarehouse.getStore_name() + "%");                }            }            return qr.query(conn, sql.toString(), new BeanListHandler<>(QueryWarehouse.class), args.toArray());        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }        return null;    }    @Override    public QueryTab_Materials QueryUpdatem( String QueryUpdatem ) {//        System.out.println("Dao修改查询物料进来了");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "select materials_id, materials_coding, materials_name, unit_coding, materials_specification, materials_remark, type_coding, materials_status, materials_useprocess from tab_materials where materials_coding = ?  ";            System.out.println("Dao修改查询物料" + qr.query(conn, sql, new BeanHandler <>(QueryTab_Materials.class), QueryUpdatem));            return qr.query(conn, sql, new BeanHandler <>(QueryTab_Materials.class), QueryUpdatem);        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }        return null;    }    @Override    public QueryWarehouse QueryUpdatew( String QueryWarehousew ) {//        System.out.println("Dao修改查询物料库存进来了");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "select  materials_coding, store_name, warehouse_warningvalue, warehouse_stockquantity, warehouse_remark from tab_warehouse where materials_coding = ?";//            System.out.println("Dao修改查询物料库存" + qr.query(conn, sql, new BeanHandler <>(QueryWarehouse.class), QueryWarehousew));            return qr.query(conn, sql, new BeanHandler <>(QueryWarehouse.class), QueryWarehousew);        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }        return null;    }    @Override    public void updateM( Tab_Materials tab_materials ) {//        System.out.println("Dao修改物料信息");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "update tab_materials set materials_name = ? , unit_coding = ? , materials_specification = ?, " +                    " materials_remark = ? , materials_useprocess = ? , type_coding = ? , materials_status = ?  where materials_coding  = ? ";            qr.update(conn, sql, tab_materials.getMaterials_name(), tab_materials.getUnit_coding(),                    tab_materials.getMaterials_specification(), tab_materials.getMaterials_remark(), tab_materials.getMaterials_useprocess(),                    tab_materials.getType_coding(), tab_materials.getMaterials_status(), tab_materials.getMaterials_coding());        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }    }    @Override    public void updateW( Tab_Warehouse tab_warehouse ) {//        System.out.println("Dao修改物料库存");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "update tab_warehouse set store_name = ? , warehouse_warningvalue = ? , warehouse_stockquantity = ? , warehouse_remark = ? where materials_coding = ? ";            qr.update(conn, sql, tab_warehouse.getStore_name(), tab_warehouse.getWarehouse_warningvalue(),                    tab_warehouse.getWarehouse_stockquantity(), tab_warehouse.getWarehouse_remark(), tab_warehouse.getMaterials_coding());        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }    }    @Override    public void deletematerials( String deletem ) {//        System.out.println("Dao层获取要删除物料的ID" + deletem);        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "delete from tab_materials where materials_coding = ?";            if (deletem != null && !"".equals(deletem)) {                String[] m_coding = deletem.split(",");                String[][] params = new String[m_coding.length][1];                for ( int i = 0; i < m_coding.length; i++ ) {                    params[i][0] = m_coding[i];                }                qr.batch(conn, sql, params);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }    }    @Override    public void deletewarehouse( String deletew ) {//        System.out.println("Dao层获取要删除库存的ID" + deletew);        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "delete from tab_warehouse where materials_coding = ?";            if (deletew != null && !"".equals(deletew)) {                String[] w_coding = deletew.split(",");                String[][] deletew_id = new String[w_coding.length][1];                for ( int i = 0; i < w_coding.length; i++ ) {                    deletew_id[i][0] = w_coding[i];                }                qr.batch(conn, sql, deletew_id);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }    }    @Override    public void listpage( ) {    }    @Override    public List <QueryWarehouse> listWarehouse( ) {//        System.out.println("Dao页面库存查询进来了");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "select  materials_coding, store_name, warehouse_warningvalue, warehouse_stockquantity, warehouse_remark from tab_warehouse";            System.out.println("仓库字典" + qr.query(conn, sql, new BeanListHandler <>(QueryWarehouse.class)));            return qr.query(conn, sql, new BeanListHandler <>(QueryWarehouse.class));        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }        return null;    }    @Override    public List <QueryStore_Dictionary> DQueryStore_Dictionary( ) {//        System.out.println("Dao仓库字典查询进来了");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "select store_coding, store_name from store_dictionary ";//            System.out.println("仓库字典"  + qr.query(conn, sql, new BeanListHandler<>(QueryStore_Dictionary.class)));            return qr.query(conn, sql, new BeanListHandler <>(QueryStore_Dictionary.class));        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }        return null;    }    @Override    public List <QueryType_Dictionary> DQueryType_Dictionary( ) {//        System.out.println("Dao类型字典查询进来了");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "select type_coding, type_name from type_dictionary ";//            System.out.println("类型字典" + qr.query(conn, sql, new BeanListHandler<>(QueryType_Dictionary.class)));            return qr.query(conn, sql, new BeanListHandler <>(QueryType_Dictionary.class));        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }        return null;    }    @Override    public List <QueryUnit_Dictionary> DQueryUnit_Dictionary( ) {//        System.out.println("Dao单位字典查询进来了");        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "select unit_coding, unit_name from unit_dictionary ";//            System.out.println("单位字典" + qr.query(conn, sql, new BeanListHandler<>(QueryUnit_Dictionary.class)));            return qr.query(conn, sql, new BeanListHandler <>(QueryUnit_Dictionary.class));        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }        return null;    }    @Override    public void statust( String statust ) {//        System.out.println("Dao修改物料启用状态");        System.out.println(statust);        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "update tab_materials set  materials_status = 0  where materials_coding  = ? ";            if (statust != null && !"".equals(statust)) {                String[] m_coding = statust.split(",");                String[][] statust_id = new String[m_coding.length][1];                for ( int i = 0; i < m_coding.length; i++ ) {                    statust_id[i][0] = m_coding[i];                    qr.batch(conn, sql, statust_id);                }            }        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }    }    @Override    public void statusp( String statusp ) {//        System.out.println("Dao修改物料停用状态");        System.out.println(statusp);        Connection conn = null;        try {            conn = JdbcUtil.getConnection();            String sql = "update tab_materials set  materials_status = 1  where materials_coding  = ? ";            if (statusp != null && !"".equals(statusp)) {                String[] m_coding = statusp.split(",");                String[][] statusp_id = new String[m_coding.length][1];                for ( int i = 0; i < m_coding.length; i++ ) {                    statusp_id[i][0] = m_coding[i];                    qr.batch(conn, sql, statusp_id);                }            }        } catch (Exception e) {            e.printStackTrace();        } finally {            JdbcUtil.close(conn);        }    }}